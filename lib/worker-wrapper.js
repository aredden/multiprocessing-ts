'use strict';
var __importDefault =
	(this && this.__importDefault) ||
	function (mod) {
		return mod && mod.__esModule ? mod : { default: mod };
	};
Object.defineProperty(exports, '__esModule', { value: true });
const child_process_1 = require('child_process');
const json_utils_1 = __importDefault(require('./json-utils'));
const has_1 = __importDefault(require('lodash/has'));
const allWorkers = [];
process.on('exit', () => allWorkers.forEach((worker) => worker.process?.kill()));
function makeError(errorMsg, stack) {
	const err = new Error(errorMsg);
	err.stack = stack;
	return err;
}
class WorkerWrapper {
	constructor() {
		this.process = null;
		this.runningJobs = 0;
		this.terminated = false;
		this.registeredJobs = {};
		this.fnOrModulePaths = {};
		this.timeout = null;
		this.startWorkerProcess();
		allWorkers.push(this);
	}
	startWorkerProcess() {
		this.process = (0, child_process_1.fork)(`${__dirname}/worker.js`);
		for (const regJobId in this.registeredJobs) {
			if ((0, has_1.default)(this.registeredJobs, regJobId)) {
				const job = this.registeredJobs[regJobId];
				this.registerJob(regJobId, job.fnOrModulePath, {}, job.callback);
			}
		}
		this.process.on('message', (data) => {
			if (!this.registeredJobs || !this.registeredJobs[data.jobId]) {
				throw new Error('No job was registered for: ' + data.jobId);
			}
			const job = this.registeredJobs[data.jobId];
			if (job.terminated) {
				return;
			}
			if (this.timeout) {
				clearTimeout(this.timeout);
			}
			let err = null;
			if (data.error) {
				err = makeError(data.error, data.stack);
			}
			job.callback(err, data);
			if (data.jobDone) {
				this.runningJobs -= 1;
			} else if (job.timeout > 0) {
				this.startJobTimeout(job);
			}
			if (this.terminated && this.runningJobs === 0 && this.process) {
				this.process.disconnect();
			}
		});
	}
	runJob(jobId, index, argList) {
		if (this.terminated) {
			return;
		} // TODO: should this be an error?
		this.process?.send({
			jobId: jobId,
			index: index,
			argList: json_utils_1.default.safeStringify(argList),
		});
		this.runningJobs += 1;
		if (!this.registeredJobs) {
			console.log('warning no registered jobs for jobId', jobId);
			return;
		}
		const job = this.registeredJobs[jobId];
		if (job.timeout > 0) {
			this.startJobTimeout(job);
		}
	}
	registerJob(jobId, fnOrModulePath, options, callback) {
		const timeout = (options ? options.timeout : null) || -1;
		if (this.terminated) {
			return;
		} // TODO: should this be an error?
		if (!this.registeredJobs) {
			console.error('No jobs registered');
			return;
		}
		this.registeredJobs[jobId] = {
			id: jobId,
			callback,
			fnOrModulePath,
			timeout,
			options,
			terminated: false,
		};
		const modulePath = typeof fnOrModulePath === 'string' ? fnOrModulePath : null;
		const fnStr = typeof fnOrModulePath === 'function' ? fnOrModulePath.toString() : null;
		this.process?.send({
			jobId: jobId,
			modulePath: modulePath,
			fnStr: fnStr,
		});
	}
	deregisterJob(jobId) {
		if (this.terminated) {
			return;
		} // TODO: should this be an error?
		if (this.registeredJobs) {
			delete this.registeredJobs[jobId];
			this.process?.send({
				jobId: jobId,
				deregisterJob: true,
			});
		}
	}
	terminateImmediately() {
		this.terminated = true;
		this.process?.disconnect();
		for (const cbName in this.registeredJobs) {
			if ((0, has_1.default)(this.registeredJobs, cbName)) {
				this.registeredJobs[cbName].callback(new Error('Pool was closed'), null);
			}
		}
	}
	terminateAfterJobsComplete() {
		this.terminated = true;
		if (this.runningJobs === 0) {
			if (this.process?.connected) {
				this.process.disconnect();
			}
		}
	}
	startJobTimeout(job) {
		this.timeout = setTimeout(() => {
			job.terminated = true;
			this.process?.kill();
			this.startWorkerProcess();
			job.callback(new Error('Task timed out'), null);
		}, job.timeout);
	}
}
exports.default = WorkerWrapper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLXdyYXBwZXIuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJ3b3JrZXItd3JhcHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGlEQUFtRDtBQUNuRCw4REFBcUM7QUFDckMscURBQTZCO0FBRTdCLE1BQU0sVUFBVSxHQUFvQixFQUFFLENBQUM7QUFDdkMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFFakYsU0FBUyxTQUFTLENBQUMsUUFBZ0IsRUFBRSxLQUFjO0lBQ2xELE1BQU0sR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ2xCLE9BQU8sR0FBRyxDQUFDO0FBQ1osQ0FBQztBQUVELE1BQXFCLGFBQWE7SUFPakM7UUFDQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztRQUNyQixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUN4QixJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsZUFBZSxHQUFHLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUVwQixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztRQUMxQixVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxrQkFBa0I7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFBLG9CQUFJLEVBQUMsR0FBRyxTQUFTLFlBQVksQ0FBQyxDQUFDO1FBQzlDLEtBQUss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
