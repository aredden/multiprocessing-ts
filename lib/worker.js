'use strict';
var __importDefault =
	(this && this.__importDefault) ||
	function (mod) {
		return mod && mod.__esModule ? mod : { default: mod };
	};
Object.defineProperty(exports, '__esModule', { value: true });
const json_utils_1 = __importDefault(require('./json-utils'));
const jobFns = {};
const isPromise = (obj) => obj && typeof obj.then === 'function';
function processData(argList, jobId, index) {
	function sendErr(err) {
		try {
			if (process.send)
				if (process.send)
					process.send({
						jobId: jobId,
						error: err.message,
						stack: err.stack,
					});
		} catch (err) {
			console.warn(err);
		}
	}
	function sendSucess(res, offset) {
		try {
			if (process.send)
				process.send({
					jobId: jobId,
					index: index + offset,
					result: json_utils_1.default.safeStringify(res),
					jobDone: offset === argList.length - 1,
				});
		} catch (err) {
			console.warn(err);
		}
	}
	async function handlePromise(promise, offset) {
		try {
			const res = await promise;
			return sendSucess(res, offset);
		} catch (err) {
			return sendErr(err);
		}
	}
	try {
		const fn = jobFns[jobId];
		argList.forEach((args, offset) => {
			const res = fn(args);
			return isPromise(res) ? handlePromise(res, offset) : sendSucess(res, offset);
		});
	} catch (err) {
		return sendErr(err);
	}
}
process.on('uncaughtException', (err) => {
	console.error(err);
	process.exit(1);
});
process.on('message', (data) => {
	if (data.argList) {
		processData(json_utils_1.default.safeParse(data.argList), data.jobId, data.index);
	}
	if (data.deregisterJob) {
		delete jobFns[data.jobId];
		return;
	}
	if (data.modulePath) {
		jobFns[data.jobId] = require(data.modulePath);
	}
	if (data.fnStr) {
		let fn;
		eval('fn =' + data.fnStr); // eslint-disable-line
		jobFns[data.jobId] = fn;
	}
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLmpzIiwic291cmNlUm9vdCI6Ii4vc3JjLyIsInNvdXJjZXMiOlsid29ya2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsOERBQXFDO0FBQ3JDLE1BQU0sTUFBTSxHQUF3QixFQUFFLENBQUM7QUFDdkMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxHQUF1QixFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksT0FBTyxHQUFHLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQztBQUVyRixTQUFTLFdBQVcsQ0FBQyxPQUFjLEVBQUUsS0FBc0IsRUFBRSxLQUFVO0lBQ3RFLFNBQVMsT0FBTyxDQUFDLEdBQVU7UUFDMUIsSUFBSTtZQUNILElBQUksT0FBTyxDQUFDLElBQUk7Z0JBQ2YsSUFBSSxPQUFPLENBQUMsSUFBSTtvQkFDZixPQUFPLENBQUMsSUFBSSxDQUFDO3dCQUNaLEtBQUssRUFBRSxLQUFLO3dCQUNaLEtBQUssRUFBRSxHQUFHLENBQUMsT0FBTzt3QkFDbEIsS0FBSyxFQUFFLEdBQUcsQ0FBQyxLQUFLO3FCQUNoQixDQUFDLENBQUM7U0FDTDtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ2IsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNsQjtJQUNGLENBQUM7SUFDRCxTQUFTLFVBQVUsQ0FBQyxHQUFRLEVBQUUsTUFBYztRQUMzQyxJQUFJO1lBQ0gsSUFBSSxPQUFPLENBQUMsSUFBSTtnQkFDZixPQUFPLENBQUMsSUFBSSxDQUFDO29CQUNaLEtBQUssRUFBRSxLQUFLO29CQUNaLEtBQUssRUFBRSxLQUFLLEdBQUcsTUFBTTtvQkFDckIsTUFBTSxFQUFFLG9CQUFTLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQztvQkFDcEMsT0FBTyxFQUFFLE1BQU0sS0FBSyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUM7aUJBQ3RDLENBQUMsQ0FBQztTQUNKO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDYixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2xCO0lBQ0YsQ0FBQztJQUNELEtBQUssVUFBVSxhQUFhLENBQUMsT0FBcUIsRUFBRSxNQUFXO1FBQzlELElBQUk7WUFDSCxNQUFNLEdBQUcsR0FBRyxNQUFNLE9BQU8sQ0FBQztZQUMxQixPQUFPLFVBQVUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDL0I7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNiLE9BQU8sT0FBTyxDQUFDLEdBQVksQ0FBQyxDQUFDO1NBQzdCO0lBQ0YsQ0FBQztJQUVELElBQUk7UUFDSCxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQVMsRUFBRSxNQUFXLEVBQUUsRUFBRTtZQUMxQyxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckIsT0FBTyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDOUUsQ0FBQyxDQUFDLENBQUM7S0FDSDtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ2IsT0FBTyxPQUFPLENBQUMsR0FBbUIsQ0FBQyxDQUFDO0tBQ3BDO0FBQ0YsQ0FBQztBQUVELE9BQU8sQ0FBQyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRTtJQUN2QyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25CLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDakIsQ0FBQyxDQUFDLENBQUM7QUFFSCxPQUFPLENBQUMsRUFBRSxDQUNULFNBQVMsRUFDVCxDQUFDLElBT0EsRUFBRSxFQUFFO0lBQ0osSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ2pCLFdBQVcsQ0FBQyxvQkFBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDdkU7SUFDRCxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7UUFDdkIsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFCLE9BQU87S0FDUDtJQUNELElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDOUM7SUFDRCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDZixJQUFJLEVBQU8sQ0FBQztRQUNaLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsc0JBQXNCO1FBQ2pELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO0tBQ3hCO0FBQ0YsQ0FBQyxDQUNELENBQUMifQ==
