'use strict';
var __importDefault =
	(this && this.__importDefault) ||
	function (mod) {
		return mod && mod.__esModule ? mod : { default: mod };
	};
Object.defineProperty(exports, '__esModule', { value: true });
const json_utils_1 = __importDefault(require('./json-utils'));
const worker_wrapper_1 = __importDefault(require('./worker-wrapper'));
const bluebird_1 = __importDefault(require('bluebird'));
const os_1 = __importDefault(require('os'));
const has_1 = __importDefault(require('lodash/has'));
class Pool {
	constructor(numWorkers) {
		numWorkers = numWorkers || os_1.default.cpus().length;
		this.queue = [];
		this.closed = false;
		this.workers = Array.from(new Array(numWorkers)).map(() => new worker_wrapper_1.default());
		this.readyWorkers = this.workers.slice();
		this._nextJobId = 0;
	}
	// Prevents any more tasks from being submitted to the pool.
	// Once all the tasks have been completed the worker processes will exit.
	close() {
		this.closed = true;
		this.workers.forEach((worker) => worker.terminateAfterJobsComplete());
	}
	// Stops the worker processes immediately without completing outstanding work.
	terminate() {
		this.closed = true;
		this.workers.forEach((worker) => worker.terminateImmediately());
	}
	define(name, fnOrModulePath, options) {
		if ((0, has_1.default)(this, name)) {
			throw new Error(`Pool already has a property "${String(name)}"`);
		}
		this[name] = {
			map: (arg) => this.map(arg, fnOrModulePath, options),
			apply: (arg) => this.apply(arg, fnOrModulePath, options),
		};
	}
	// Applies single argument to a function and returns result via a Promise
	apply(arg, fnOrModulePath, options) {
		return this.map([arg], fnOrModulePath, options).spread((result) => result);
	}
	map(arr, fnOrModulePath, options) {
		return new bluebird_1.default((resolve, reject) =>
			this._queuePush(arr, fnOrModulePath, options, (err, data) => (err ? reject(err) : resolve(data)))
		);
	}
	_queuePush(arr, fnOrModulePath, options, cb) {
		options = options || {};
		const chunksize = typeof options === 'number' ? options : options.chunksize;
		if (this.closed) {
			return cb !== undefined && cb(new Error('Pool has been closed'), null);
		}
		this._assertIsUsableFnOrModulePath(fnOrModulePath);
		if (!arr || !arr.length) {
			return cb !== undefined && cb(null, []);
		}
		const job = {
			id: this._getNextJobId(),
			arr: arr,
			fnOrModulePath: fnOrModulePath,
			chunksize: chunksize || Math.ceil(arr.length / this.workers.length),
			cb: cb,
			nextIndex: 0,
			options: options,
		};
		this._registerJobWithWorkers(job);
		this.queue.push(job);
		this._queueTick();
	}
	_queueTick() {
		while (this.queue.length && this.readyWorkers.length) {
			const job = this.queue[0];
			const chunk = job.arr.slice(job.nextIndex, job.nextIndex + job.chunksize);
			this.readyWorkers.pop()?.runJob(job.id, job.nextIndex, chunk);
			job.nextIndex = job.nextIndex;
			job.nextIndex += job.chunksize;
			if (job.nextIndex >= job.arr.length) {
				this.queue.shift();
			}
		}
	}
	_registerJobWithWorkers(job) {
		const result = [];
		let tasksRemaining = job.arr?.length ? job.arr.length : 0;
		let jobTerminated = false;
		this.workers.forEach((worker) => {
			worker.registerJob(
				typeof job.id === 'number' ? String(job.id) : job.id,
				job.fnOrModulePath,
				job.options ? job.options : {},
				(err, data) => {
					this.readyWorkers.push(worker);
					this._queueTick();
					if (jobTerminated) {
						return worker.deregisterJob(job.id);
					}
					if (err) {
						worker.deregisterJob(job.id);
						jobTerminated = true;
						return job.cb(err, null);
					}
					if (!data) {
						throw 'No data returned from worker.';
					}
					if (typeof data.result === 'string') {
						result[data.index] = json_utils_1.default.safeParse(data.result);
					}
					if (job.options && job.options.onResult) {
						job.options.onResult(result[data.index], data.index);
					}
					tasksRemaining -= 1;
					if (tasksRemaining <= 0) {
						worker.deregisterJob(job.id);
						return job.cb(null, result);
					}
				}
			);
		});
	}
	_assertIsUsableFnOrModulePath(fnOrModulePath) {
		if (typeof fnOrModulePath !== 'function' && typeof fnOrModulePath !== 'string') {
			throw new Error('fnOrModulePath must be a function or a string');
		}
	}
	_getNextJobId() {
		return this._nextJobId++;
	}
}
exports.default = Pool;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9vbC5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbInBvb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw4REFBcUM7QUFDckMsc0VBQTZDO0FBQzdDLHdEQUF5QjtBQUN6Qiw0Q0FBb0I7QUFDcEIscURBQTZCO0FBRzdCLE1BQXFCLElBQUk7SUFPeEIsWUFBWSxVQUFrQjtRQUM3QixVQUFVLEdBQUcsVUFBVSxJQUFJLFlBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUM7UUFFNUMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksd0JBQWEsRUFBRSxDQUFDLENBQUM7UUFDaEYsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFRCw0REFBNEQ7SUFDNUQseUVBQXlFO0lBQ3pFLEtBQUs7UUFDSixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLDBCQUEwQixFQUFFLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQsOEVBQThFO0lBQzlFLFNBQVM7UUFDUixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQztJ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
