'use strict';
var __importDefault =
	(this && this.__importDefault) ||
	function (mod) {
		return mod && mod.__esModule ? mod : { default: mod };
	};
Object.defineProperty(exports, '__esModule', { value: true });
const json_utils_1 = __importDefault(require('./json-utils'));
const worker_wrapper_1 = __importDefault(require('./worker-wrapper'));
const bluebird_1 = __importDefault(require('bluebird'));
const os_1 = __importDefault(require('os'));
const has_1 = __importDefault(require('lodash/has'));
class Pool {
	constructor(numWorkers) {
		numWorkers = numWorkers || os_1.default.cpus().length;
		this.queue = [];
		this.closed = false;
		this.workers = Array.from(new Array(numWorkers)).map(() => new worker_wrapper_1.default());
		this.readyWorkers = this.workers.slice();
		this._nextJobId = 0;
	}
	// Prevents any more tasks from being submitted to the pool.
	// Once all the tasks have been completed the worker processes will exit.
	close() {
		this.closed = true;
		this.workers.forEach((worker) => worker.terminateAfterJobsComplete());
	}
	// Stops the worker processes immediately without completing outstanding work.
	terminate() {
		this.closed = true;
		this.workers.forEach((worker) => worker.terminateImmediately());
	}
	define(name, fnOrModulePath, options) {
		if ((0, has_1.default)(this, name)) {
			throw new Error(`Pool already has a property "${String(name)}"`);
		}
		this[name] = {
			map: (arg) => this.map(arg, fnOrModulePath, options),
			apply: (arg) => this.apply(arg, fnOrModulePath, options),
		};
	}
	// Applies single argument to a function and returns result via a Promise
	apply(arg, fnOrModulePath, options) {
		return this.map([arg], fnOrModulePath, options).spread((result) => result);
	}
	map(arr, fnOrModulePath, options) {
		return new bluebird_1.default((resolve, reject) =>
			this._queuePush(arr, fnOrModulePath, options, (err, data) => (err ? reject(err) : resolve(data)))
		);
	}
	_queuePush(arr, fnOrModulePath, options, cb) {
		options = options || {};
		const chunksize = typeof options === 'number' ? options : options.chunksize;
		if (this.closed) {
			return cb !== undefined && cb(new Error('Pool has been closed'), null);
		}
		this._assertIsUsableFnOrModulePath(fnOrModulePath);
		if (!arr || !arr.length) {
			return cb !== undefined && cb(null, []);
		}
		const job = {
			id: this._getNextJobId(),
			arr: arr,
			fnOrModulePath: fnOrModulePath,
			chunksize: chunksize || Math.ceil(arr.length / this.workers.length),
			cb: cb,
			nextIndex: 0,
			options: options,
		};
		this._registerJobWithWorkers(job);
		this.queue.push(job);
		this._queueTick();
	}
	_queueTick() {
		while (this.queue.length && this.readyWorkers.length) {
			const job = this.queue[0];
			const chunk = job.arr.slice(job.nextIndex, job.nextIndex + job.chunksize);
			this.readyWorkers.pop()?.runJob(job.id, job.nextIndex, chunk);
			job.nextIndex = job.nextIndex;
			job.nextIndex += job.chunksize;
			if (job.nextIndex >= job.arr.length) {
				this.queue.shift();
			}
		}
	}
	_registerJobWithWorkers(job) {
		const result = [];
		let tasksRemaining = job.arr?.length ? job.arr.length : 0;
		let jobTerminated = false;
		this.workers.forEach((worker) => {
			worker.registerJob(
				typeof job.id === 'number' ? String(job.id) : job.id,
				job.fnOrModulePath,
				job.options ? job.options : {},
				(err, data) => {
					this.readyWorkers.push(worker);
					this._queueTick();
					if (jobTerminated) {
						return worker.deregisterJob(job.id);
					}
					if (err) {
						worker.deregisterJob(job.id);
						jobTerminated = true;
						return job.cb(err, null);
					}
					if (!data) {
						throw 'No data returned from worker.';
					}
					if (typeof data.result === 'string') {
						result[data.index] = json_utils_1.default.safeParse(data.result);
					}
					if (job.options && job.options.onResult) {
						job.options.onResult(result[data.index], data.index);
					}
					tasksRemaining -= 1;
					if (tasksRemaining <= 0) {
						worker.deregisterJob(job.id);
						return job.cb(null, result);
					}
				}
			);
		});
	}
	_assertIsUsableFnOrModulePath(fnOrModulePath) {
		if (typeof fnOrModulePath !== 'function' && typeof fnOrModulePath !== 'string') {
			throw new Error('fnOrModulePath must be a function or a string');
		}
	}
	_getNextJobId() {
		return this._nextJobId++;
	}
}
exports.default = Pool;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9vbC5qcyIsInNvdXJjZVJvb3QiOiIuL3NyYy8iLCJzb3VyY2VzIjpbInBvb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw4REFBcUM7QUFDckMsc0VBQTZDO0FBQzdDLHdEQUF5QjtBQUN6Qiw0Q0FBb0I7QUFDcEIscURBQTZCO0FBRzdCLE1BQXFCLElBQUk7SUFPeEIsWUFBWSxVQUFrQjtRQUM3QixVQUFVLEdBQUcsVUFBVSxJQUFJLFlBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUM7UUFFNUMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksd0JBQWEsRUFBRSxDQUFDLENBQUM7UUFDaEYsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFFRCw0REFBNEQ7SUFDNUQseUVBQXlFO0lBQ3pFLEtBQUs7UUFDSixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLDBCQUEwQixFQUFFLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQsOEVBQThFO0lBQzlFLFNBQVM7UUFDUixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQztJ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
